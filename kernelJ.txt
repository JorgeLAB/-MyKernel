*https://guides.github.com/
*https://www.atlassian.com/br/git/tutorials

*http://guides.rubyonrails
*http://ruby-toolbox.com/
*https://github.com/avdi
*https://www.programmer-books.com/wp-content/uploads/2018/07/Agile_Web_Development_with_Rails_5.pdf
*https://www.caelum.com.br/download/caelum-ruby-on-rails-rr71.pdf

*https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04-pt
*https://docs.docker.com/engine/install/ubuntu/
*https://docs.docker.com/get-started/

*https://angular.io/guide/setup-local

*https://asdf-vm.com/#/core-manage-asdf-vm

*https://docs.mongodb.com/manual/reference/operator/





----------------------- >Angular ------------------------------------

npm install -g @angular/cli                                                  => Install Angular CLI
sudo npm install -g @angular/cli --allow-root
ng new my-app                                                                => criando um app cli
ng serve --open                                                              => Ligar o servidor
https://localhost:4200/.	
ng generate component <nome>                                                 => Gerando componente
ng generate service <caminho>                                                => Necessário para conectar Angular com rails

---------------------- >asdf ----------------------------------------

Maneger version Framework

asdf plugin add <name>                                                       => Adicionar plugin
asdf plugin list                                                             => Mostrar lista de plugins 
asdf plugin update --all                                                     => Atualizar todos os plugins
asdf plugin remove <name>                                                    => Você pode remover plugins
asdf install <name> <version>                                                => Instalar uma especifica versão da ferramenta instalada 
asdf install <name> latest                                                   => Instalar a última versão estável
asdf list <name>                                                             => Lista as versões instaladas
asdf list all <name>                                                         => Listar todas as versões de uma ferramenta 
asdf global <name> <version> [<version>...]                                  => Setar a versão no computador.
asdf shell <name> <version> [<version>...]
asdf local <name> <version> [<version>...] 
asdf current <name>                                                          => Ver a versão corrente instalada de uma certa linguagem.	

-------------------- >Bootstrap -------------------------------------

<div class="container-fluid"></div>                                          =>
<img class="img-responsive" />
<h2 class="text-center" />
<button class="btn btn-default"></button>
<button class="btn btn-default btn-block"></button>
<button class="btn btn-primary btn-block"></button>
"btn-danger"
"btn-info"
<div class="row"></div>
<div class="col-xs-4"></div>
<span class="danger"></span>
<span class="fas fa-thumbs-up"></span>
<i class="fas fa-info-circle"></i>
<input type="text" class="form-control" placeholder="...<div>" required><div>
<div class="well"></div>


sass --watch node_modules/bootstrap/scss:node_modules/bootstrap/compiler     => ao empregar o bootstrap pelo node temos de compilar o código scss






------------------------ >Docker ------------------------------------

** Por default temos de usar sudo para rodar o docker 
sudo apt-get remove docker docker-engine docker.io containerd runc 		          => Apagar versões antigas
sudo systemctl status docker                                                 => Status docker 
docker docker-subcommand --help                                              => Especifica um comando a ser usado e o descreve 
docker images                                                                => para vizualizar as imagens do seu pc
docker rmi ID_ou_nome_da_imagem                                              => Remover as imagens locais
docker search <nome_da_imagem>                                               => Pesquisar uma imagem online
docker ps -a                                                                 => Listar os containers em execução
docker rm Id_ou_nome                                                         => Remove o container em execução
Imagem                                                                       => -An image includes everything needed to run an application - the code or binary, runtimes, dependencies, and any other filesystem objects required.
docker pull ubuntu                                                           => Puxa a imagem oficial ubuntu
docker start 1c08a7a0d0e4<id_nome>                                           => Para iniciar um containeer parado
docker exec -it <id_nome> bash                                               => Retomar o container que foi inicializado 
docker stop quizzical_mcnulty<id_nome>                                       => Parando o docker em execução
docker run -i t ubuntu <id_nome>                                             => usar um tipo de container

docker build -t my_awesome_app .                                             => Ele executa o Dockerfile, gerando a imagem através do Dockerfile
ls





** Fato interessante nosso containers podem se transformar em imagens que podemos usar para gerar outros containers
docker commit -m "What you did to the image" -a "Author Name" container_id repository/new_image_name             => Criar uma imagem de um container    
docker commit -m "added Node.js" -a "sammy" d9b100f2f636 sammy/ubuntu-nodejs                                     => Um exemplo
exit                                                                         => sair do container 
docker ps -l                                                                 => mostra o último container criado
docker ps                                                                    => mostrar os container em execução
Control+P+Q                                                                  => Sai do terminal container que estava usando mas ainda o deixa executando 
docker attach <id_do_container>                                              => Como voltar a execução do conteiner
Control+V                                                                    => Saio do container e o mato (não funcionou comigo)
docker create <imagem>                                                       => Crio o container mais não o executo
docker pause <container_id>                                                  => Consigo pausar o container
docker unpouse <container_id>                                                => despausando o container
docker stats <container_id>                                                  => Mostra o quanto o container consome isso se ele estiver em execução
docker logs <commainer_id>                                                   => Motra logs ( comandos usados )
docker top <container_id>                                                    => Mostras mais dados do container


docker run -it --rm --user "$(id -u):(id -g)" -v "$PWD":/usr/src/app -w /usr/src/app rails rails --skip-bundle new my_new_app



------------------------ >Git --------------------------------------- 

sudo apt-get install git 
git config --global user.name "myname "
git config --global user.email "myemail"
gti config --global --list                                                    => Listará todas as configurações git 
git init
git status
git add arquivo                                                               => arquivo agora esta sendo rastreado Untracked file -> stage
git commit -m "Novo arquivo comitado"
git mv                                                                        => "The command to rename a file using Git is git mv"

git branch <nome>                                                             => Permite criar, listar, apagar e renomear ramificações
git branch -D  <nome>                                                         => 
git branch -m <nome>                                                          => renomear branch atual para nome 
git branch -a                                                                 => Listar todas as branchs remotas
git push origin --delete <nome>                                               => Excluir uma branch remota ( ou git push origin :<nome>)

git rebase origin master                                                      => Pesquisar ( Resolução de !reject  master -> master)

git push -f origin master                                                     => push forçado.
git log                                                                       => mostrará os commits - verifica alteracoes realizadas
git remote                                                                    => ver a situação
git remote rm <name>                                                          => desfaz conexões
git remote rename <antigo> <novo>
git remote add upstream https or ssh 	                                        => Sincronização de repositório remoto e local
git push -u origin master                                                     => Primeiro push em um repositório remoto
git push origin master                                                        => use para dar update nos seus arquivos remotos (Caso recebar erro: git push master --force ) 
git clone https...                                                            => Faz o clone do repositorio remoto em sua maquina
git commit -a -m ""                                                           => Envia as modificações para stage e faz o commit
git log --oneline                                                             => Mostra um historico resumido de modificações 
git log --pretty=oneline                                                      => Mostra histórico em uma linha.
git log --stat                                                                => Mostra histórico mais completo para sair aperte q
git diff                                                                      => Faz a verificação que foi modificado no codigo
git diff <nome_do_arquivo>                                                    => Aponta para um arquivo especifico
gir diff --name-only                                                          => Mostra o nome dos arquivos que foram modificados.
git diff --staged                                                             => Faz a verificação até dos arquivos na staged
git rm index.html                                                             => Para descartar um arquivo após o comando ser dado o arquivo ira para área de stage aguardando ser commitado. Uma observação é que ele continuará no repositorio porém deletado.
git vm origem.html destino.html                                               => Mover ou renomear um arquivo
git checkout                                                                  => Desfaz mudanças que ainda não foram commitadas
git checkout -- <nome_do_arquivo>                                             => Retorna um arquivo para o estado do commit anterior. 
git reset                                                                     => Agora desfaz mudanças dos arquivos que já tiverem sido rastreados
git reset --hard                                                              => Além de tirar o arquivo do stage também volta a seu estado original - Volta para o commit apontado sem constar no histórico.
git revert --no-edit "summet"                                                 => Não consegui aplicar
git config --global alias.co checkout                                         => Renomeando comandos.
git config --global credential.helper "cache --timeout=86400"                 => lembrando da senha.

git submodule add <url/do/repositório> <destino/do/submódulo>                 => Trabalho submodulos no git ( um repositorio dentro de outro )
git checkout HEAD~1                                                           => Depois de commitado podemos retornar um commit 

git reset < hash log > --hard                                                 => reseta a branch até a escolhida

(Como mostrar branch no terminal linux)
export PS1='\u@\h\[\033[01;34m\] \w\[\033[0;32m\]$(__git_ps1 " (%s)")\[\033[01;34m\]$\[\033[00m\] '   => Insirir no final do arquivo .bashrc arquivo homme
source ~/.bashrc                                                                                      => Execute no terminal o comando (salva o estado).
(Não esqueça de adicionar uma chave ssh no seu repositório remoto)

(Criando a chave pública e privada ssh)

ssh-keygen -o -a 100 -t ed25519 -f ~/.ssh/id_ed25519 -C "umemaildeRegistro@host.com"

ls -al ~/.ssh                                                                 => Veja se você já possui uma chave ssh

git commit --amend -m "Uma nova mensagem"                                     => reescrever o último commit, tem de haver cautela e nessa situação sem nenhum arquivo stage
** Ante adicione os outros arquivos que vc deseja commitar no stage 

git reset --soft HEAD~2                                                       => Eu reseto os comites que fiz até no meu penúltimo, porém não reseto os arquivos que fiz ou modifiquei.

git reset HEAD <nome_do_arquivo>                                              => remove um arquivo do stage também.
git reset HEAD *                                                              => Removendo todos os arquivos do stage.
git reset -- <nome_do_arquivo>                                                => remover um arquivo do stage, lembrar que há um espaço entre -- e o nome
git add -i                                                                    => com está opção vc pode fazer multiplaz inserções no stage sem usar git add . modo interativo
git add -p                                                                    => Em um mesmo arquivo com várias modificações posso distinguir os commits.

git rm -f --cached [<nome_arquivo]>                                           => Caso você venha a instalar um repositorio dentro de outro, sem querer, apagar o arquivo.git não é a única solução para que o arquivo deixe de ser um submodule você tem de limpar o cache.

git log --pretty=format:"%h - %an, %ar : %s"                                  => Conferir o log, mais bem detalhado
git log --pretty=format:"%h %s" --graph                                       => ver com uma estrutura de branchs


---------------------------------- Git - Diogo  ----------------------------

git checkout <branch_name>                             => Switch Branch
git checkout -b <branch_name>                          => If Branch not exist, create and Switch
git branch -D <branch_name>                            => Delete that Branch
git push origin :<branch_name>                         => Delete Branch remotely
git add app/views/mobile/checkout/payment.html.haml    => Add file to commit
git commit -m "18534 - Adding terms check validation"  => Commit changes
git push -u                                            => Push and set upstream (only first push)
git push origin feature/18534-term                     => Push local files to Github
git pull origin feature/18534-relayout                 => Get new files of this Branch in remote
git merge --no-ff <branch-approved>                    => Merge <branch-approved> with current branch (commit merge)
git cherry-pick <commit SHA1>                          => Add specific commit at current branch
git rebase <branch>                                    => Reload specific branch on current branch (if was changed after created)
git reset --merge ORIG_HEAD                            => Undo merge that was not pushed to origin yet
git reset --hard HEAD~1                                => Back one commit
git reset --hard origin/<branch>                       => Reset local branch to remote branch
git checkout origin/master Gemfile.lock                => Reset specific file from master
git commit --amend -m "edit msg"                       => Edit last commit (if already pushed use -f) - mas antes podemos adicionar novos arquivos com add ai daremos o amend
git tag 1.55.1                                         => Create tag locally
git tag --delete 1.55.1                                => Delete tag locally
git push origin :1.55.1                                => Delete tag remotely
pull request (PR) direto pelo Github                   => Pull Request
git fetch --all                                        => Update all remotes locally but not upgrade the commits
git stash                                              => Save all different files temporary and remove from branch
git stash pop                                          => Revert git stash
git stash clear                                        => Delete all stashs
git show -s --format=%ci <commit>                      => Get time of commit were pushed
git --no-pager show <branch>:path/to/file              => Print content of file

git config --global user.name "Full Name"              => Set name of user
git config --global user.email "email@address.com"     => Set email of user 


--------------------------------- >Javascrip --------------------------------------

// /**/                                               => Comentário de uma linha e comentário para múltiplas linhas
=                                                     => recebe ( atribuição )
null                                                  => nulo
var                                                   => identificador
let                                                   => identificador 
`String`  - "String" - 'String'                       => String, forma de escrever strings
Infinity 
NaN                                                  
object                                      
typeof <name>                                         => retorna o tipo
+                                                     => concatenação
Number.parseInt(n)                                    => converter para inteiro
Number.parseFloat(n)                                  => converter para float 
Number(n)                                             => Uma forma nova ( 2019 ) o motor quem decide
JSON.parse()                                          => Converter um JSON em objeto. 
`Placeholder ${ variável }.`                          => Desta forma podemos interpolar variáveis
s.length                                              => Comprimento da string 
<string>.toUpperCase()                                => Tornar para maiusculo
<string>.toLowerCase()                                => Tornar para minusculo
document.write()                                      => Output no Browser ( Imprimi uma string no browser ) 
<variável>.toLocalString('<string>', {style: 'value', currenty: 'RS'} )                         => Nesse caso é um exemplo de fazer modificação monetária ( Real, Dolar, etc ...)
var <nome> *=, %= , **=, /=, -=, +=                   => Essa sintaxe é válidada de atribuição
<, >, >=, <=, ==, !=                                  => Relacionamentos com retorno booleano
===                                                   => Operador de igualdade restrita ( avalia o tipo também )
&&                                                    => Conjunção
!                                                     => Negação
||                                                    => Disjunção 


let variavel = () => expressão;                       => Uma arrow function nada mais é que uma função anônma simplificada. Curioso é que podemos omitir os parenteses caso tenha apenas uma variável a usarmos.



DOM                                                   => Document Object Model 
window -> location/document/history -> html -> head/body -> tags                 => árvore DOM
getElementsByTagName('p')[0];                         => Selecionar o parágrafo da posição 0     var texto = window.document.getElementsByName('<tag>')[<posição>];
document.write(p1.innerText);                         => podemos inserir o paragrafo capturado um uma nova frase com o innerText.
innerHTML                                             => insere também as tags filhas além do texto
getElementById[ ]                                     => Seleciona um seletor id 
getElementsByName()                                   => 
var nome = querySelector(#id)                         => seleciona um id ou class 
querySelectorAll(.class)                              => 
nome.style.background()                               => Podemos mudar o estilo diretamente
window.prompt                                         => retorna uma string
window.alert                                          =>
window.confirm                                        => 
<var>.addEventListener('evento', função)              => Carrega o evento internamente no js
mouseenter                                            => inline é onmouseenter, onclixk  
mouseover                                           
mousemove                  
mouseout           
mousedown
mouseup 

(?=[A-Z])                                             => Regex

 randomIndex: Math.floor(Math.random() * 20)          => Random method


--------------------------                            => Usando addEventListener com React

class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      message: ''
    };
    this.handleEnter = this.handleEnter.bind(this);
    this.handleKeyPress = this.handleKeyPress.bind(this);
  }
  // change code below this line
  componentDidMount() {
      document.addEventListener('keydown', this.handleKeyPress)
  }
  componentWillUnmount() {
    document.removeEventListener("keydown", this.handleKeyPress) 
  }
  // change code above this line
  handleEnter() {
    this.setState((state) => ({
      message: state.message + 'You pressed the enter key! '
    }));
  }
  handleKeyPress(event) {
    if (event.keyCode === 13) {
      this.handleEnter();
    }
  }
  render() {
    return (
      <div>
        <h1>{this.state.message}</h1>
      </div>
    );
  }
};
-------------------------
	
D3

d3 
select()
append() 
text() 
selectAll()
attr()
style()
enter()
append('svg')
append('react')

-----------------------------

 document.addEventListener('DOMContentLoaded', function(){})                        ** Destas forma estamos inspecionando nosso interface para que qualquer evento ocorrido seja tratado pelo DOMContentLoaded; JSON API and AJAX






 
-------------------- >Heroku -------------------------

sudo snap install heroku --classic
heroku login
heroku create
git push heroku master                                => Fazendo deploy de projeto
heroku open                                           => Irá abrir sua URL
heroku log --tail                                     => Acessando log
heroku ps                                             => verifica os dyno de sua aplicação free
heroku local web                                      => estou rodando o server pelo heroku e a sua porta é a 5000 ( localhost:5000)
heroku local                                          =>
heroku addons:open <name_app_base_addon>              => dados de seu plano para a aplicacao
heroku run rails console                              => carrega um console rails heroku ( um console remoto )
heroku run bash                                       => bash do servidor
heroku config:set <exemplo - TIMES=10>                => Setar algo na env, você utilizará essas configurações na produção
heroku config                                         => ver as configurações 

heroku pg:psql                                        => heroku dbconsole
heroku run rake db:migrate                            => faz a migração para o banco de dados heroku

echo $DATABASE_URL                                    => Irá motrar o caminho do banco definido pelo usuário ( remoto server)


-------------------- >MongoDB -------------------------

https://docs.mongodb.com/manual/tutorial/install-mongodb-enterprise-on-ubuntu/                   => Instalação

SQL                              Mongo

database                         database
table                            collection
row                              document ou BSON document
column                           field
index                            index
table join                       References ou embedded documents


Mongo terminal 
sudo mongod --dbpath /data/db                         => Rodo o Mongo
sudo mongo                                            => Abro o shell mongo
show dbs                                              => Irá mostrar os bancos de dados criados
use <nome_banco_de_dados>                             => Apontar para um banco de dados
db.createCollection('nome_da_collection')             => Criar um collection ( é como se fosse criar uma tabela)
show collections                                      => mostrar as collections em uso.
db.<nome_do_collection>.find()                        => Fazer uma busca de dados e todos o documentos da collection 
db.<nome_do_collectio>.insert({})                     => inserir uma linha
db.<nome_do_collection>.save()                        => tem a mesma funcionalidade do insert
db.<nome_do_collection>.update()                      => Faz atualização de uma linha.  e.g = db.checklist.update({name: "Original"},{name: "Atualizado"})
db.<nome_do_collection>.delete()                      => Apaga uma linha especificada.
db.<nome_do_collection>.insertMany([{},{}])           => Podemos criar múltiplas linhas dentro de um collection de uma vez só;
db.task.insertMany([{"name": "Preparar o café", "done": true, checklist: ObjectId("5f6a6a09be8e95201b4fb45a")},{"name": "Ligar a TV", done: true, checklist: ObjectId("5f6a6a09be8e95201b4fb45a")}])

db.<nome_do_collection>.find().pretty()               => Torna o retorno da query mais legível.
db.<nome_do_collection>.aggregate({$lookup: {from: "<nome_do_collection_referenciado>", localField:"_id", foreignField:"<nome_do_collection>", 

MongoDB Enterprise > db.checklist.aggregate({$lookup: {from: "task", localField: "id", foreignField: "checklist", as: "task"}}).pretty()


as:<nome_do_collection_referenciado>}}).pretty()      => o aggregate e $lookup realizam buscas mais complexas 
db.<nome_do_collection>.drop()                         => função de deletar;
db.checklist.deleteOne({ name: "Minha checklist" })    => deleta um documento







-------------------- >MySQL - SQL----------------------

sudo apt update                                  ** update system 
sudo apt install mysql-server -y                ** instalação da última versão do mysql ( sudo apt install mysql-server )
sudo systemctl status mysql.service              ** vericação de "active server"
sudo mysql_secure_installation_                  ** instalação de segurança
yM&$z9^%KzXnL%t4BM1RJ*$Lnsw                      ** senha colocada 

sudo systemctl start mysql.service               ** inicializando o servidor
 mysqladmin -u root -p shutdown                  ** parar conexão.
ip addr show eth0 | grep inet | awk '{ print $2; }' | sed 's/\/.*$//'                   ** Encontrar o endereço de ip público do seu servidor

mysql -u root -p nome_da_database                ** Acessa o banco

sudo apt-get install apache2                     ** Instalação do apachi
localhost/                                       ** Acessando o apachi no browser

sudo add-apt-repository ppa:ondrej/php           ** primeiro passo na instalação do php7 ( Adição do repositorio do php7)
sudo apt-get update                              ** dar um update

sudo apt-get install apache2 php7.0-common php7.0-cli php7.0 libapache2-mod-php7.0                              ** Instalação do php7


create table comclien_bkp as( select * from comclien where c_estaclien = 'SP');                                 ** Basicamente estou criando uma tabela com atributos de outra 


** Configuração do php para apontar para rota específica 
sudo nano /etc/apache2/mods-enabled/dir.conf

Modifique para:  DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm

sudo systemctl restart apache2                    ** reiniciar o servidor web 
service mysql status
sudo service mysql stop


use database_that_you_want                        ** use é o comando que carrega a database para ser consultada 



--------------------------- >Node.js --------------------------

sudo apt intall node.js
.exit                                             => Sair do terminal de comando node 
console.log()                                     => Output ( printar um valor )
typeof                                            => retorna o tipo  ( JS )
<number>.tofixed(numero de casas )                => comando que muda o número de casas depois da virgula  
<number>.tofixed().replace('.',',')               => o replace faz a conversão de uma string em outra              
sudo apt install npm

Rails - Crie um arquivo especificando a nvm apontando o node que está sendo utilizado
touch .nvmrc 

process                                           => É uma biblioteca interna do node que podemos usar para acessar dados enviados do usuário require('process')

process.stdout.write()                            => Escrever algo no terminal
process.stdin.o('data', entrada => { })           => Pdemos capturar os caracteres digitado pelo usuário
process.exit()                                    => Método que força a saida do dado
fs                                                => Com esta biblioteca podemos criar, excluir, renomear e atualizar arquivos
fs.writeFile(<name_arquivo>,<dados_internos>, err => { console.log(err)})    => Como gerar um arquivo
fs.rename(<name_antigo>,<name_novo>)                                         => Renomear um arquivo
fs.appendFile(<name_arquivo>,<novos_dados>, err => { console.log(err)})      => Acrescentando dados à um arquivo antigo
__dirname                                                                    => Variável de ambiente que aponta o caminho do diretório
fs.unLink(<name_arquivo>, err => { console.log(err)})                        => Deleta um arquivo

http                                                                         => Biblioteca que possibilita a criação de um server
const server = creatServer((req,res) => {})                                  => req é a requisição e res é a resposta
req.method                                                                   => Informará qual verbo está sendo empregado
req.url                                                                      => Retornará a url passada
res.statusCode=200                                                           => Qual o status da paǵina, sendo 200 está tudo certo
server.listen(3000, () =>{})                                                 => Qual porta podemos estar acessando nosso server;

npm install express --save                                                   => Framework express
npm install nodemon --save-dev                                               => Pacote que salva as modificações sem necessitar restartar o server

snap install postman                                                         =>

chain of Resposibility Express                                               =>

Middlewares                                                                  =>

npm install mongoose --save                                                  => Intermediário MongoDB e Express(Aplicação)


------------------------- >NPM ------------------------------

~/.npm/                                            => Caminho onde encontramos o packages 

https://github.com/nvm-sh/nvm                      => Instalação nvm.
nvm install node 
nvm ls-remote                                      => listarar todas as versões node
nvm use node                                       => Mostrar a versão em uso do node
nvm run node --version                             => Auto explicativo
nvm exec 4.2 node --version                        => Usar uma versão especifica do node
nvm which v14.5.0                                  => Descobrir o caminho da versão node especificada
nvm use system                                     =>
nvm ls                                             => Lista as versões
nvm run system --version                           => 
nvm alias default 0.11.13                          => Tornando uma versão node default
nvm use default                                    => apontando

npm root                                           => caminho npm
npm help update 
npm help config                                    => Ver documentação
npm init                                           => iniciar um projeto
npm init --yes                                     => cria um package sem as perguntas (pula as perguntas) ou apenas -y
npm config set init-author-name "<seu_nome>"       => Configurando nome default depois do npm init.
npm set init-license "MIT"                         => Configurando licensa default.
npm get init-license                               => Retorna "MIT"
npm delete init-license                            => Reseta as confirações init
npm install <nome_package>                         => Como baixamos packages
npm install <nome_package> --save                  => Acho que não há distinção com o de cima. ( Em tutoriais a distinção é "escrita automática no package.json")
npm install <nome_package> --save-dev              => Para ambiente de Desenvolvimento
npm uninstall <nome_package>                       => Desinstala a dependencia antes instalada
npm install <nome_package> -g                      => Instalando um package globally. (sudo)
npm list --global                                  => Listas os packages globais.
npm uninstall <nome_package> -g                    => Desinstalação da lista de package global (sudo)
npm install loadash@3.3.0 --save                   => Salvamos uma npm específica
npm update --dev --save-dev                        => Fazemos update de --dev --save-dev
npm install npm@latest -g    
npm install -g npm@latest -g                       => Update npm use sudo
 
transpilação com Babel - transpilar uma versão do ECMA em outra. Uma ferramenta que possibilita a compatibilidade de navegadores que não suportam determinada versão.

npm install @babel/core @babel/cli @babel/preset-env --save-dev  // um pacote que usamos apenas em desenvolvimento não em produção.( --save-dev)
npx babel <nome_arquivo_a_transpilar>                                                           => Gera um print do arquivo transpilado.
npx babel <nome_arquivo_a_transpisrclar> -o <nome_do_arquivo_de_saida>                             => Gera um novo arquivo com os dados do arquivo antigo transpilado
npx babel <nome_arquivo_a_transpilar> -o <nome_do_arquivo_de_saida> --presets=@babel/preset-env => a biblioteca que instalamos nos possibilita especificar a vesão de transpilação
babel.config.js                                                                                 => Para não precisar ficar execuntando --presets=@babel/preset-env crie o arquivo babel.config.js 

npx babel <nome_diretorio_a_ser_transpilado> --out-dir <nome_do_diretorio_de_saida>             => Além de Arquivos podemos transpilar diretórios inteiros. Podemo usar o --presets=@babel/preset-env

npx                                                                                             => npx pode ser configurado, pois é apenas uma atalho para


sudo npm install http-server --global                                                           => Pacote de mini servidor local

npm install --save-dev webpack webpack-cli														=> Instalação do webpack criando o arquivo src, O webpack é estático não se comporta como um server de inicio.

npx webpack --mode development                                                                  => Ambiente webpack de desenvolvimento para o webpack
npm install webpack-dev-server --save-dev                                                       => Mine servidor webpack para rodar a app.

-------------------------- Python--------------------------- 

Criar virtual venv 
      python3 -m venv .venv
		source .venv/bin/activate
      
Para desativar digite deactive.

python3 -m http.server

----------------------------------------- >PostgreSQL ------------------------------------------------------------

Para a Instalaçãoão apenas veja o site oficial

pg_ctlcluster 11 main start                           ** Para iniciar o server
g_ctlcluster 12 main start

psql --version                                        ** O psql é o programa de gerenciamento e uso do PostgreSQL pelo usuário local. 

createdb <noma_banco> -U postgres                     ** criar um banco
psql -l -U postgres                                   ** vizualizar o banco criado
dropdb <nome_banco> -U postgres                       ** Excluir o banco de dados indicado


sudo apt update

sudo apt install postgresql postgresql-contrib

sudo -i -u postgres                                  ** Entrar, logo depois digita-se psql ( user)
sudo -u postgres psql

\l                                                   ** lista databases.
\du                                                  ** verifica a permissao de usuários
\d                                                   ** Mostra todas as tabelas de um certo banco de dados
\g                                                   ** fazer consulta
\?                                                   ** Ajuda comandos
\h <Nome_do_comando>                                 ** Ajuda comando

\c dbname username                                   ** Você acessar qualquer banco de dados passando o nome dele seu usuário
\dt                                                  ** Você conseguirar visualizar todas as tabelas desse banco
\d <nome_da_tabela>                                  ** Dessa forma você conseguirá acessar os atributos da tabela passada

\g                                                   ** SELECT version(); ( Mostrar a versão do postgres e dados do sistema)
\s                                                   ** Histório de comandos usados


DROP DATABASE <nome_do_banco_de_dados_a_ser_excluido> ** Excluir banco de dados


----------------------------------------- PHP --------------------------------------------

sudo apt install php7.2-cli                            **Baixando php7

chmod 755 [o nome do executável]                       **Para a instalação do xampp ( dar permissão)
ls -l [nome  do executável]                            **Verificar permissões.
sudo apt install net-tools                             ** If occurred error.

sudo service apache2 status
sudo service apache2 stop
----------------------------------------- >VS Code --------------------------------------

Control + shift + P Output



 
-------------------------- >Rails----------------------------- 

David Heinemeier Hansson - DHH

sudo apt-get install apache2 curl git libmysqlclient-dev mysql-server nodejs                                  => instalação 1
curl -L https://get.rvm.io | bash -s stable                                                                   => key rvm
rvm requirements --autolibs=enable                                                                            => instalando prérequisitos rvm
rvm install 2.3.1                                                                                             => instalando uma versão ruby
rvm use 2.3.1                                                                                                 => dentre tantas versões apontar uma para usar
rvm list                                                                                                      => Lista todas as versões de ruby no rvm 
gem install rails --version=5.0.0.1 --no-ri --no-rdoc                                                         => instalando o rails uma versão específica
rvm --default 2.3.1                                                                                           => especificando uma versão ruby default
rails -v                                                                                                      => verficando verção rails 
gem list --local rails                                                                                        => Lista todas as versões rails presente
rails s ( bin/rails server)                                                                                   => acionar o server
rails s [server] [opições]                                                                                    => localhost//3000
rails s webrick
rails s -p 4000                                                                                               => Acessando porta 4000
rails s -e production                                                                                         => Definindo ambiente
rails s -d                                                                                                    => Servido de aceeso Daemon
rails s -b 127.0.0.5                                                                                          => Sobe o servidor de densenvolvimento no ip 127.0.0.5
time rails runner ''                                                                                          => testar velocidade de carregamento rails


rails c                                                                                                       => Roda o console
rails c [ambiente] [opições]                                                                                  => Ambiente = pode se production, development, ...
rails c --sandbox                                                                                             => Roda o console mais não altera o banco o final
rails db                                                                                                      => Acessa o console do banco de dados

rails about                                                                                                   => Mostra informações quantitativas da aplicação
rails stats                                                                                                   => Mostra mais informações quantitativas da app ( quantidade de models, controllers, etc...)
rails
RAILS_ENV=production rails production                                                                         => Pegando informações da app em produção



EDITOR=subl rails credentials:edit                                                                            => editando as credentials.yml.enc ( Assim você edita um arquivo que será criptografado para editar a master key) 

rails new myproject --api --database=mysql -T
rails new <project> -d mysql                                                                                 => Cria uma nova aplicação e o -T representa sem a pasta Test
rake db:drop                                                                                                 => Deleta a sua base de dados inteira
rake db:create                                                                                               => Criar a base de dados 
rake db:rollback                                                                                             => Limpar a database criada pelo scaffold and return migration (drop)
rails detroy scaffold <nome>                                                                                  => excluir scaffold

rails dev:cache                                                                                               => Note that this command will cause your server to automatically restart. "so  there’s  no  need  to  start from scratch on each request."

@product.order(:title)                                                                                        =>   
seed.rb > Product.delete_all                                                                                  => Com esta linha de código podemos deletar toda nossos dados para testa-los novamente. (Use o codigo a seguir para executar o comando)
bin/rails db:seeds                                                                                            => To populate your products table with test data, run the following command 

app/assets/stylesheets/scaffold.scss                                                                          => Podemos estar mudando o estilo de um view 

rails generate migration add_novaColuna_tabela                                                                => gera uma nova coluna, depois disso temos de ir ao migration e adicionar 	add_column  :produto, :descricao, :text ( Veja na Documentação do ActiveRecord )
rails g migration AddColumnsToUser col1:integer col2:integer .. etc.                                          => gerar mais de uma coluna


bin/rails generate controller Say hello goodbye                                                               => é possivel gerar um controler criando ao mesmo tempos os métodos
bin/rails generate scaffold <Nome> \
       title:string description:text image_url:string price:decimal                                           => Cria a estrutura MVC de Product gerando um *migrate
bin/rails generate scaffold LineItem product:references cart:belongs_to                                       =>
belongs_to                                                                                                    => é um metodo foreign-key 
references                                                                                                    => é um método foreign-key ( também )
has_many :line_items, dependent: :destroy                                                                     => para certo model há "várias (0 ou n)" line_items qua dependem do model caso seja excluido todas os :line_items serão também na base de dados.
bin/rails generate scaffold add_quantity_to_line_items quantity:integer                                       => Adiciona uma coluna na tabela line_items
add_XXX_to_TABLE 
remove_XXX_from_TABLE         

Rake                                                                                                          => Server para fazer uma alteração na base de dados. Essa aula é muito boa #34
rake dbconsole ( rails c)                                                                                     => 
rake -T                                                                                                       => Lista de comandos 
rake routes 
rails g task apagar_dados <table>_produto1   <table>_produto2                                                 => Gera uma rake na lib > task para fazer uma execução no banco. Criando rakes  

rails console                                                                                                 => Console do rails onde posso estar fazendo buscas 
<%= render 'layout/menu' %>                                                                                   => Partials para a view desejada _menu.html.erb
@variable                                                                                                     => Variavel de contexto que pode ser acessada na view
<%= render 'layout/menu', projeto: 'Lana'  %>                                                                 => Passando uma parametro de uma view para a partial.

sudo lsof -wni tcp:3000                                                                                       => Verificar servidores ativos
sudo kill <PID>                                                                                               => Derrubar o servidor com o PID passado.
	kill -9 $(lsof -i tcp:3000 -t)                                                                                => Derrubar server
rake assets:clean && rake assets:precompile                                                                   => limpando cache


bin/rails db:migrate:status      	                                                                             =>

before_destroy   :ensure_not_reference_by_any_line_item           (hook method)                               => É um validate como o metodo cascate no SQL, evita que uma produto seja deletado caso esteja presente em carts.
before_action                                                                                                 => UMa metodos auxiliares que são passados antes de se executar aguma action

index, show, create                                                                                           => São endpoints


bin/rails db:migrate 
rails db:migrate:redo STEP=3                                                                                  => Consegue desfazer os três últimos roolback
rails db:rollback                                                                                             => Desfaz o último migrate
rails db:rollback STEP=3                                                                                      => Desfaz os 3 últimos migrate 
bin/rails test                                                                                                => verifica erros na aplicação

<%= image_tag @usuario.avatar.thumb.url if @usuario.avatar? %>                                                => Implementação de imagem na view usando carrierwave

app/ models                                                                                                   => Nesta pasta serão tratada as validações
validates :title, :description, :image_url, :price, presence: true                                            => Validando existência 
validates :price, numericality: {greater_than_or_equal_to: 0.01}                                              => validação de valor numérico se for maior ou igual a 0.01
validates :title, uniqueness: true                                                                            => validação de uniciadade, verificando se o título inserido é o único.
validates :image_url, allow_blank: true, format {
  with:   %r{\.(jpg|png|gif)\Z}i,
  message:  'Inserir extensões JPG, GIF or PNG.' 
} 
bin/rails test test/controllers/line_items_controller_test.rb                                                 => test

bin                                                                                                           => Pasta onde encontra-se os executáveis / Aquivos de configuração / 
app                                                                                                           => Onde será escrita aplicação / Tudo que é dinâmico vai aqui
assets                                                                                                        => Agrupas os arquivos css e js para melhorar a performance do sistema. / nã mantem no cache
public                                                                                                        => Pasta estática que possui exemplo como Erros 500 e 404, com o apoio de cache do usuário, Status code
test/fixtures                                                                                                 => Consigo setar objetos para teste 
initializer                                                                                                   => A primeira pasta a ser executado quando chamo o servidor **
helpers                                                                                                       => Vai ajudar na construção do layout erb, agrupando pedaços de código. juntando um code de front e back ( uma boa comparação é com partials só que os helpers são melhores por que os partials não tem de haver tanta interação de back)

db                                                                                                            => Onde possue as configurações da base de dados
seed.rb                                                                                                       => Onde posso testa direto na base de dados

ApplicationHelpers                                                                                            => Serve para todos os contextos já que herda de ApplicationController

RAILS_ENV=production bundle exec rake assets:precompile                                                       => Subindo a aplicação para ambiente de produção compilando os assets ( Faz o mesmo que o Gulp - mais leve e performatico )

tails -f production.log                                                                                       => Acompanhando erros em produção

>GEMs

gem install backup -v5.0.0.beta.1                                                                             => Tivo problema para instalar essa gem, depende da versão ruby
gem devise                                                                                                    => Autenticação
gem 'devise_token_auth'                                                                                       => 'you want authentication, you need tokens, not cookies refreshes the tokens on each request, and expires them in a short time, so the app is secure'
	
gem 'omniAuth'																																																=> Um gem de autenticação via Facebook, google ... pode ser combinado com devise

gem 'cancancan'                                                                                               => Autorização 
gem 'pundit'                                                                                                  => mesma funcionalidade do cancancan contudo está sendo mais usada(2020)

gem 'carriewave'                                                                                              => upload de arquivos
gem 'paperclip'                                                                                               => upload de arquivos possui funcionalidade parecidas do Carriewave
gem 'shrine'                                                                                                  => upload de arquivos desenhada para ser assincrona
gem install mailcatcher                                                                                       => Envio de email pelo ambiente development. ( demora um pouco a instalação no sistema )
gem "bootstrap"                                                                                               => Configurações na pasta asset e javascrip > packs > application







Action Cable                                                                                                  =>  The client of a WebSocket connection is called the consumer.



* Iniciando novo_projeto

  
          ** sudo apt-get install curl
          ** https://get.rvm.io | bash -s stable --ruby
          ** Instalação do rvm   
          ** echo "source $HOME/.rvm/scripts/rvm" >> ~/.bash_profile
          ** source ~/.bashrc
          ** rvm                                          => Versionador ruby
          ** rvm install 2.0.0 ou rvm install 2.3.3 ...   => Assim vai um atalho para baixar várias versão de ruby;
         
          ** rvm use 2.0.0 ou rvm use 2.3.3 ...           => Apontar qual versão você deseja usar.
          ** gem install rails --no-ri --no-rdoc          => Caso não tenha o rails esse é o momento de instalar 
          ** gem list                                     => lista todas gems 
          **sudo apt install ruby-railties                => intalação do rails 
 

  1) init bundle
          **Some of the frameworks have builtin support for Bundler, e.g. when you run rails new app it will automatically init Bundler.
          https://bundler.io/v2.0/guides/using_bundler_in_applications.html#getting-started---installing-bundler-and-bundle-init
          bundle install é empregado quando queremos atualizar as gems.
          **sudo apt install ruby-bundler 
  1.1) Caso haja problema na instalação do gem mysql2:
          **sudo apt-get install libmysqlclient-dev
          **bundle install

  2) Um problema muito ruim é quando a versão ruby do system é diferente do rvm, quando há uma troca rvm use ruby-2.6.3 não é modificado no system:

         Problema de permissão:
         ** su - $USER                                     ** Dá ao usuário permissões de root em home do usuário
         ** rvm fix-permissions system                     ** Muda o estatos de permissão do rvm - /usr/share/rvm/rubies/
         ** id
         ** rvm install ruby-2.6.3                         ** Instala alguma versão do ruby
         ** rvm list                                       ** Lista todas as versões ruby presente
         ** rvm use 2.6.3                                  
         ** gem bundler install                            ** reinstação do bundler o gerenciador de gems
         ** bundle install
         ** gem 'thin'                                     ** Um servidor alternativo ao que vem no rails.Por padrão é o webpack
  3) rails new novo_projeto -d mysql                                                    ** Instalação do mysql
         ** sudo apt-get install mysql-server mysql-client libmysqlclient-dev           ** Fazer essa instalação do mysql2 antes 
         ** a mesma senha de root da sua máquina, root, será a mesma de todas os ambientes. Tome cuidado.

  4) Criando arquivos de controle de versão ( dentro da pasta de meu projeto)
          **.ruby-gemset                                  ** Nome da aplicação que será criada para se trabalhar com a versão no ruby-version
          **.ruby-vesion                                  ** Escreva a versão do rails que irá trabalhar no arquivo
  3) Criando banco 
          ** rake dbconsole                               ** Fazer consulta
          ** rails s                                      ** Carregar o servidor o mesmo que rails server
          ** rails s -e production                        ** Levanta o banco de dados de produção 

  3.1) Lembrar da gem install haml

  4) Criando pagina home e controller_home
          ** rails g Home index ( rails generation Home index)                           ** Criação de um controller home e uma action index 
          ** rails g controller home  
  4.1) Configuração da routes 
          ** get "home/index"
             root "home#index"

  4.2)
          ** rake -T                                                                     ** Exibe um help do gerenciador rake 
  4.3) Helpers
          ** localhost: 3000/rails/info/routes                                            ** Mostra todas as rotas

  5) Criando um modelo
          ** rails g model user
          ** rails generate scaffold custumer  nome:string email:string obs:string       ** Por convenção do rails os modelos são no singular mas as tabelas serão no plural
          ** timestamps(created_at e updated_at)                                                            ** Por convenção o rails cria para você um id e chave primária
          ** rake db:migrate
  6) Caso necessite desfazer do modelo 
          ** rails d model user
  7) Fiz uma migração errada 
          ** rails db:rollback           
!>8) Criando um cadastro de post
          ** rails g scaffold Post titulo:string descricao:text
  9) Deleta o banco , cria um banco e faz a migração
     rake db:drop db:create db:migrate
-------------------------------------------------

Testes automatizados

gem install rspect
rspect --init                                                    ++ Inicializa o gem rspec sem o Gemfile

gem 'rspec-rails'                                                ++ Em um projeto rails no Gemfile
rails genarate rspec:install                                     ++ instalando o rspec depois do banco de dados
rails genarate rspec:request User                                ++ Cria um teste request para o model user
rails generate --help | grep rspec                               ++ Lista de generate do rails 


describe                                                         ++ Definir Grupos de testes
context                                                          ++ Agrupar testes associados, é subcateria para agrupar os testes parecidos
it                                                               ++ Definit um exemplo ( teste )
expect                                                           ++ Verifica condições

match                                                            ++ verificar se uma condição está sendo atendida
expect(actual).to eq(expected)
expect(actual).to eql(y)
expect(actual).to be(y)

expect(atual).to be > x
expect(atual).to be >= x
expect(atual).to be <= x
expect(atual).to be < x
expect(atual).to match(/expression/)                             
expect(actual).to be_an_instance_of(expected)
expect(actual).to be_a(expected)
expect(actual).to be_truthy
expect(actual).to be true
expect(atual).to be_falsy
expect(atual).to be false
expect(atual).to be_nil
expect(atual).to_not be_nill

expect {...}.to raise_error
expect {...}.to raise-error(ErrorClass)
expect {...}.to raise-error("message")
expect {...}.to raise-error(ErrorClass, "message")

gem FFAKER                                                      ++ Permite gerar valores aleatórios - Evita dados viciados 
FFaker::Name.name                                               ++ Gera um nome 
FFaker::Internet.email                                          ++ gera email fake
FFaker::Andress.city                                            ++ cidade fake
  	nickname = FFaker::Name.first_name
  	kind = %i[knight wizard].sample
  	level = FFaker::Random.rand(10..99)  

gem factory bot                                                 ++ Parecido com o Fixtures do test Há um processo de criação de diretórios

config.include FactoryBot::Syntax::Methods                      ++ incluir dentro da pasta rails helper

testes de request                                               ++ integração de model, controller, server um teste mais global

rails g controller users index create --no-helper --no-assets --no-controller-specs --no-view-specs --skip-routes
rails g controller enemies update destroy --no-helper --no-assets --no-controller-specs --no-view-specs --skip-routes

expect(response).to have_http_status(200)                       ++ 200 é um statu de sucesso

get                                                             ++ Adquirir dados do banco
pos                                                             ++ inserir dados

--------------------------------------------------

Scaffold 
   rails generate scaffold cliente nome idade: integer --migration= false -s
   # Bastante interessante: cliente recebe todas as views e controller criados anteriormente na migration 
 
________________________________________________________

Partials 
   São pedaços de html.erb que podem ser visualizados em outras views.
   Agora, para ser criado um partial basta criar um arquivo _meupartial na view desejada 
   logo depois podemos incrementa-lo onde é necessário com render partial: "meupartial".
   Lembre-se do underscore.  -Reaproveitamento de código erb.

ApplicationHelper - 

________________________________________________________

debugger rails 

  GemFile

  group :development, :test do
    gem 'pry-byebug'
  end

  <% require 'pry'; binding.pry %>  # no html.erb
   - binding.pry # no haml
   binding.pry  # no ruby


Combine 'pry' with 'byebug'. Adds 'step', 'next', 'finish', 'continue' and 'break' commands to control execution.


** Como usar o debug
   insira o codigo flag onde se deseja fazer a pausa, você conseguirar visualizar no inspetor do navegador. Conseguentimento no seu terminal aparecerá um console main pry >, para consulta 

  whereami # retornará sua posição.
  exit-program # saida bruta


________________________________________________________

Record Rails :: Base
belongs_to, has_one, has_many, has_and_belongs_to_many_ = https://www.devmedia.com.br/introducao-a-relacionamentos-no-ruby-on-rails/33860

https://guides.rubyonrails.org/active_record_basics.html

________________________________________________________

Docs 

gem server                                             * Comando que inicia o servidor WebRick na porta 8808

________________________________________________________

Action Jobs

*https://onebitcode.com/dominando-o-uso-de-jobs-no-rails/

--------------------------- >React -------------------------------------------------------

npx create-react-app                                 ** Criar uma estrutura react SPA. Tendo um server hot reload

class <name> extends React.Components{                ** Component de classes - States ( Uma forma mais antiga)
		constructor(props){  
			super(props);
			this.states = {
				name: "dados"
			}
		}

		render(){
		
		}
}     

{/*     */}                                         ** Adicinar comentários no React.
ReactDOM.render(componentToRender, targetNode)      ** Renderizar react no html.
ReactDOM.render(<TypesOfFood />, document.getElementById('challenge-node'));

{props.tasks.join(', ')}
<List tasks={["react","bootstap","sass"]} />

MyComponent.defaultProps = { location: 'San Francisco' }

MyComponent.propTypes = { handleClick: PropTypes.func.isRequired }                   ** Definindo o tipo da propriedade passada

this.props.name                                                                      ** this é empregado em passagem de propriedades em classes

 this.handleClick = this.handleClick.bind(this);                                     ** uma função empregada em class components tem de ser atribuito ao bind para serem empregadas

--------------------------------------------------------
class MyComponent extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      text: "Hello"
    };
    // change code below this line
    this.handleClick = this.handleClick.bind(this);
    // change code above this line
  }
  handleClick() {
    this.setState({
      text: "You clicked!"
    });
  }
  render() {
    return (
      <div>
        { /* change code below this line */ }
        <button onClick={this.handleClick}>Click Me</button>
        { /* change code above this line */ }
        <h1>{this.state.text}</h1>
      </div>
    );
  }
};
----------------------------------------------------------
                                                                                      ** Como trabalhar update de atributos assincronos.
this.setState((state, props) => ({
  counter: state.counter + props.increment
}));
																																											** Lifecycle react
componentWillMount() 
componentDidMount() 
shouldComponentUpdate() 
componentDidUpdate() 
componentWillUnmount()

<div style={{color: "red", fontSize:"72px"}}>Big Red</div>                            ** Inserindo estilo inline

----------------------------------------------------------
																																											** Podemos criar uma condição inline no render 
  render() {
    // change code below this line
    
    return (
       <div>
         <button onClick={this.toggleDisplay}>Toggle Display</button>
         {this.state.display && <h1>Displayed</h1>}
       </div>
    );

------------------------------------------------------------

class App extends React.Component {                                                   ** Podemos executar um server no react 
  constructor(props) {
    super(props);
  }
  render() {
    return <div/>
  }
};

// change code below this line

ReactDOMServer.renderToString(<App />);

-------------------------------------------------------------

this.setState()                                     ** Forma de setar um estado

npm i react-router-dom   --save                     ** Criação de rotas.
npm i axios --save                                  ** Igual ao fetch
npm i node-sass --save                              ** sass
npm i bulma --save
npm i rbx --save                                    ** um lib bulma
npm i moment --save-dev

npm i @fortawesome/fontawesome-svg-core --save
npm i @fortawesome/free-solid-svg-icons --save
npm i @fortawesome/react-fontawesome --save

mkdir src/assets
mkdir src/assets/images
mkdir src/components
mkdir src/screens
mkdir src/styles

mv src/App.css src/App.scss

$custom-purple: #694ED8 !default;
$custom-purple-darker: #6600CC !default;

--- API -----------------------------------------	

npm i express-generator
express --view=no-view <nome-do-projeto-api> 
npm install 
npm install express-generator -g
npm install nodemon --save
npm install mongoose --save

npm install bcrypt --save
npm install jsonwebtoken --save
npm install dotenv --save
npm install cors --save                    (Permitindo que possamos chamar recursos de outros sites)
npm install react-burger-menu --save
npm install react-quill --save              Editor de textos

--------------------------- > Redux ------------------------------------------------------

let store = Redux.createStore(reducer);              ** Define um store 

let currentState = store.getState();                 ** Podemos recuperar o valor usando o get

store.dispatch(actionCreator());                     ** criamos ações e states, mas para guarda-los precisamos dar um dispatch.
store.dispatch({ type: 'LOGIN' });




--------------------------- >Ruby --------------------------------------------------------

sudo apt  install ruby-railties                      ** instalation gem rails utilitaries 
aptitude purge ruby                                  ** desinstalar ruby

gem install bundler                                  ** controlodor de versoes de gems 
irb                                                  ** interpretador ruby
pry                                                  ** É um interpretador irb bombado como é uma gem tem de ser instalado com syntaxe "raylight"

puts, p e  print                                     ** Imprimindo algo em ruby
puts                                                 ** Imprimir no console e pula linha
p                                                    ** Utilizado como metodo inspect
print                                                ** imprime no console mas vai imprimir um do lado do outro 

# / =begin bloco =end                                ** Comentarios em ruby Pode haver comentarios de linha simples ou bloco (multiplas linhas)

Metodo .class                                        ** Metodo para obter o tipo da variavel.

classe, instancias , contrutores 

meta_programer   attr_accessor, attr_writer, attr_reader                                               ** 

require_relative                                     ** Acessando classes para meu codigo.rb 

runtime - criar methodos durante execução            ** a.methods irá mostrar todos os metodos de uma determinada classe ( String, float, ou uma criada por você ...)

a = objetos

a = lambda do /p/                                    ** O lambda posso passar ou não um parâmetro para uma variável para excutar um bloco contudo apenas um parametro se for colocado /p1, p2, p3 /
	puts p                                           ** Sou obrigado a char no call 3 argumentos. Só aceita os parâmetros definidos.
end
a.call ("Jorge")

a = proc.new do /p,p1,p2/                            ** Com o proc você poderá fazer *args adicionar mais parametros na chamada podem ou não executar todos
	puts p , p1

end

a.call( "jorge", "cozinha")


def methodo ( &bloco)                                ** Permite que eu passe um blco em um méthodo, usando um PROC.new é como se fosse um callback do js 
	bloco
end.call    #nao entendi o call no final

eval("puts '1,2,3'")                                 ** Executa veja nem usei o #{} no comando  

jorge = Object.const_get(jorge)                      ** Criando uma classe dinamicamente retornando um objeto

String.downcase                                      ** tudo fica minusculo
String.upcase                                        ** tudo maiusculo

Herança
Polimorfismo
super

alias_method                                         ** Usar método renomeando o original - uma herança ~ Polimorfismo não perdendo o método original ( cria uma cópia )
defane_method                                        ** 
modele
send                                                 ** o send( 'metodo' )  ele tenta achar algum método na instancia tonando dinamico dentro de outro método ; Uma observação o método tem de estar como string      

hooks                                                **  Gancho 
  included                                           ** Modulos aponta para a instancia ( Reação - Despara um hook)
  extended                                           ** Modulo aponta para classe ( Reação - Despara um hook )
  inherited                                          ** Classe ( Reação - despara um hook  )
  callback
  fallback 
  gate de pagamento
  tiggers                                              ** nos bancos de dados seriam atualizações, alterações, drops, .../ Meio que dispara um gatilho para alguma coisa
  jobs                                                 ** executar uma ação em background ou runtime

Module                                               ** Classe superior que pode ser overwrite para modificar hooks como os missing
missing                                              ** Um elemento do ActivenRecord muito importante
	const_missing	                                 ** Mostrar que alguma classe ou constante não existe 
    method_missing                                   ** Vamos fazer um overwrite, indica que algum método ou atributo exista possivel para um metodo de instancia também Class1.new





	
Strings em Ruby são mutaveis
O operador << faz a concatenacao de strings na mesma instancia. 
Ja o operador + faz concatenacao gerando uma nova string.

#{}                                                  ** Interpolação

Metodo Capitalize - e uma funcao pura que torna a primeira letra da
palavra maiuscula. Nao ha modificacao direta da variavel.

Metodo terminado em bang(!) - torna definitivo, como assim .
nome = "jorge"
puts nome.capitalize! # Jorge
puts nome # Ainda será Jorge

Symbols são strings só que imutáveis, representado por :palavra.

Condicional if elsif.
Estrutura de repetição for i in (1..9) end. 
switch  =>  case variavel when ... when ... when ... end

https://www.sergiotoledo.com.br/tutoriais/ruby/strings-com-ruby

Expressões regulares são limitada por /rio/ =~ "São paulo" ( por barras). O =~ tem a funcao de match.
*Rubular.com é um site no qual você pode estar encontrando expressoes regulares.

Operador ||= , caso a variável esteja vazia ou seja nil preencha com o valor para atribuido.

Conversão de tipo de string para inteiro string.to_i para o float string.to_f.
Converter de range para array (1..6).to_a.  

Ruby é uma linguagem considerada puramente orientada a objeto. Tudo em ruby é objeto até os tipos basico.

O metodo .object_id retorna o numero ( identificador unico na memoria heap) do objeto enquanto o .class() retorna o tipo do objeto.

Criando um objeto com novo = Object.new

Uma declaracao de metodo basta introduzir o 'def' no inicio uma particularidade de ruby e que nao precisamos forcar uma
impressao a ultima linha do metodo e impresso automaticamente, isso para evitar os ruido sintatico.
Podendo se passar argumentos e parametros.

Agora foi realizado a criacao de uma class e uma instanciacao de variavel.
Dentro da class sao acrescentados metodos.
A class e mutavel a qualquer podemos adicionar novos metodos a ela.

Bibliotecas padrao Object e Fixnum - Qualquer classe em ruby pode ser reaberta e redefinida.

Modificadores de acesso = "Atributos em ruby são sempre privados não podemos modifica-los fora da classe, também são
chamados de variáveis de instância". Encapsulamento @nome ( variavel )

initialize ao um objeto ser criado nos iniciailizamos automaticamentes seus atributos por meio desse metodo. Sendo um
metodo privado nao pode ser chamado fora da classe.

Syntax Suger do Ruby e uma forma de facilitar legibilidade do codigo.

definindo propriedade de acesso attr_accessor , attr_reader, attr_writer / tem de ser passado um simbolo :nome

Para receber um número qualquer de parametros usamos a sintaxe *(asteristico) - sendo assim def metodo(*param)
essa variavel param funciona como um array. Esse operador * é chamado de splat

Hash é uma estrutura indexada por qualquer tipo de objeto, confg = Hash.new     confg["nome"] = "Jorge"
temos tambem uma sintaxe mais explicita {:nome = "jorge", :sobreNome ="Borges"} ou uma sintaxe mais antiga temos {:nome => "Jorge", :sobrenome => "Borges"}

Mas assim como uso do parenteses e opcional no Syntax Sugar, podemos ter a exclusao das chaves na Hash :nome = "Jorge", :sobrenome = "Borges".

------------------------- >Sass ------------------------------------------

$main-fonts: Arial, sans-serif;                           => Variáveis

                                                          => Aninhando   
nav {
  background-color: red;

  ul {
    list-style: none;

    li {
      display: inline-block;
    }
  }
}
																													=> Usando o mixin para comprimir estilos em um único seletor;
<style type='text/scss'>
  @mixin border-radius($radius){
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius; 
    -ms-border-radius: $radius;
    border-radius: $radius;
  }

  #awesome {
    width: 150px;
    height: 150px;
    background-color: green;
    @include border-radius(15px);

  }
</style>

<div id="awesome"></div>



																												  => Condições em SASS 
<style type='text/scss'>
 
  @mixin border-stroke($val){
    @if $val == light {
      border: 1px solid black;
    }
    @else if $val == medium {
      border: 3px solid black;
    }
    @else if $val == heavy {
      border: 6px solid black;
    }
    @else{
      border: none;
    }
  }


  #box {
    width: 150px;
    height: 150px;
    background-color: red;
    @include border-stroke(medium);
  }
</style>

<div id="box"></div>


																													=> loop usando o to que "excludes the end number as part of the count";

<style type='text/scss'>																	=> Também temos o through que "includes the end number as part of the count";
	
@for $j from 1 to 6 {
    .text-#{$j}{
      font-size:15px*$j;
    }
}

</style>

<p class="text-1">Hello</p>
<p class="text-2">Hello</p>
<p class="text-3">Hello</p>
<p class="text-4">Hello</p>
<p class="text-5">Hello</p>


																													=> Usando map para iterar dados.

<style type='text/scss'>
  $colors: (blue, black, red);

  @each $color in $colors{
    .#{$color}-bg{
      background-color: $color;
    }
  }


  div {
    height: 200px;
    width: 200px;
  }
</style>

<div class="blue-bg"></div>
<div class="black-bg"></div>
<div class="red-bg"></div>


$colors: (color1: blue, color2: red, color3: green);       => Outra possibilidade usando chave e valor.

@each $key, $color in $colors {
  .#{$color}-text {color: $color;}
}



$x: 1;                                                     => Usando o while no sass
@while $x < 13 {
  .col-#{$x} { width: 100%/12 * $x;}
  $x: $x + 1;
}

                                                          => Podemos extender e importar código
<style type='text/scss'>
  h3{
    text-align: center;
  }
  .info{
    width: 200px;
    border: 1px solid black;
    margin: 0 auto;
  }
  
  .info-important{
    @extend .info;
    background-color: magenta;
  }



</style>






------------------------- >Sublime_text dicas------------------------------
Plugins
 - Emmet
 - Alignment
 - Terminal
 - PlainTask
 - AdvancedNewFile 
 - LoremIpsum
 - A file icon 
 - View in Browser


Goto anything - Control + p                                            ** ( Faz uma busca de arquivos)
Command Palette - Control + shift + p                                  ** ( Faz uma busca por atalho )
Multiple Selection - Shift + alt + P                                   ** ( Multipla seleção )
Pesquisa de palavra marcada - Control + D                              ** ( selecione uma palavra e será feita as marcações )
Distract free mode - Shift + F11                                       ** ( Modo sem distração)
Modificando layout de tela - alt + shift + 2 < 3 4 5                   ** ( Podemos deixar com uma coluna uma, duas,três ou quatro)

Control + pgup/pgdn                                                    ** Pular entre tabs 


Bookmark - Control + F2 ( fazer a marcação)
           F2 (Para navegar)
           Shift + F2 (Desmarcar )
           Control + shift + F2 ( Para desmarcar tudo)

shift + alt + l                                                        ** Lorem Ipsum text

control+shift + L => cursor para cima e para baixo                     ** seleciona todo o começo de linha bom para comentar rápido 

Control + F9                                                           ** Ordem alfabetica um arquivo texto no sublime

Sublime package control instalado 
plugin   # BracketHighlighter
plugin alignment #git Gutter

alt+shift > alt+F                                                  ** Consigo navegar pelo menu bar 
Control+shift+P > menu > view:Toggle Menu                              ** Posso esconder o menu

control+H                                                          ** Faz replace


------------------------- >Terminal - Linux  -------------------------------------

>> https://canaltech.com.br/linux/entendendo-a-estrutura-de-diretorios-do-linux/
>> https://pt.wikibooks.org/wiki/Guia_do_Linux/Iniciante%2BIntermedi%C3%A1rio/Execu%C3%A7%C3%A3o_de_programas/path

Versões LTS - Long Term Suport                         ** Versões mas estáveis que não possuem atualizações de versão apenas algumas correções

ctrl+alt+T                                             ** Atalho para o terminal
$ echo ~                                               ** Shell - pasta home - comando em programação para exibir o conteúdo de uma variável.
sudo touch "nomeDoArquivo"                             ** Criar arquivo 
ls                                                     ** Faz a listagem das pastas e arquivos do diretório.
ls -p                                                  ** Faz a listagem das pastas
mv                                                     ** Mover ou renomear um arquivo. mv nomeOrigem nomeDestino
man - é um comando de glossaryo irá postar os detalhes do commando que você
deseja empregar.
rm -R                                                  ** é um comando que remove diretório com arquivos
sudo -s  ou sudo sudo                                  ** manter o modo administrador
which <command>                                        ** Comando que mostrar o caminho de outros comandos
env | grep PATH                                        ** Mostra todos os caminhos criados no PATH
ps aux                                                 ** Lista todos os processos 
ln -s <arq1> <arq2>                                    ** Criando um arquivo simbolico
sudo apt install silversearcher                        ** Instalação igual ao grep só que melhor.
ps aux | ag bash | awk '{ print $1 }'                  ** Usando pipe para multiplos comandos ps depois uma busca igual a grep com ag e awk para selecionar coluna  

sudo apt-get upgrade                                   ** Fazer atualização de  todos os programas do desk 
set | less                                             ** Todos os comando bash e.g $USER

subl                                                   ** Chamar o sublime
*pwd                                                   ** Imprimir na tela seu caminho atual.
lsb_release -a  | grep Release                         ** Conferir a versao linux - Ubuntu 19.10
ruby -v                                                ** ruby 2.5.5p157
gem -v                                                 ** 3.1.2
rvm list know                                          ** lista todas as versões ruby para mais de um sistema
cd /                                                   ** Comando que direciona para o diretório raiz
ll                                                     ** Lista os arquivos com seus permissões

oh my Zsh                                              ** Site para customizar a bash 

/usr/bin                                               ** Encontra-se o binários dos comandos básicos do shell
echo $PATH                                             ** Mostras os caminhos (Variáveis de ambiente)
echo $GEM_PATH                                         ** Mostra o caminho das gems 

find 

find . -name arquivo.txt                               ** Busca Simples de arquivo - o ponto indica para buscar no diretório atual e seus sub-diretórios 
find . -iname arquivo.txt                              ** Busca Simples de arquivo - ignora case-sensitive.
find . -depth -name diretorio arquivo.txt              ** Busca Simples de diretorio de arquivo especificado.
find /Documentos/ -name *rquivo*                       ** Busca Com coringas - Basicamente vc não sabe o nome ao certo
find . -depth -name *.txt                              ** Busca todos os arquivos de tipo txt
find . -type f -perm 0777 -print                       ** Busca todos os arquivos com permissão 0777
find . -type f ! -perm 777                             ** Busca todos os aquivos que não possuem a permisão 777
find /Documentos/Livros/ -empty                        ** Busca diretórios vazios
find /Documentos/Livros/ -type d -empty                ** Procura sódiretórios vazios
find /Documentos/Livros/ -type f -empty                ** Procura só arquivos
find . -type f -name ".*"                              ** Procurar arquivos ocultos
find . -type f -size +10M                              ** Procurar arquivos com mais de 10 MegaBytes
find . -type f -size -10M                              ** Procurar arquivos com menos de 10 MegaBytes
find /Downloads/ -tyoe f -name caelum-ux-usabilidade-wd41.pdf -exec rm -f {} \;                   ** Usando o -exec irá ser executado a remoção do arquivo
find . -type f -name arquivo.txt | xargs rm -f 
find . -name "*.*" -exec grep -Hin "Ana" {}\;          **Procurar por arquivos caso haja o nome informado dentro
find / -user bandit7 -group bandit6 size 33c 

grep 

grep -exec -l "millionth" data.txt                     **Procurar palavra especifica em arquivo

sort                                                   ** Ordena palavras dentro de arquivo

uniq -u                                                ** Faz uma busca de palavras que não se repetem

sleep 5                                                ** "Adormece" o sistema por 5 segundos
 
uname -r                                               ** ver a versão kernel linux
 	
ps -ef                                                 ** Pesquisar.

sudo dpkg -i arquivo.deb                               ** Instalando um package no linux
sudo gdebi skype.deb                                   ** Instalando uma packge na Distro Ubuntu
sudo tar -vzxf <arquivo.tar.gz)                        ** descompactar arquivo tar.gz


lsb_release  -a                                        ** Versão da distro linux
ls -h                                                  ** ls human podemos visualizar o size em MB


du -sh /var/cache/apt/archives                         ** Verificar tamanho de dados temporaŕios no sistema
du -hs                                                 ** sumariza o total de tamanho da pasta inteira 
sudo apt install bleachbit                             ** pacote de limpeza

id                                                     ** mostra o usuário corrente

sudo snap install heroku --class                       ** Instalando CLI heroku

sudo apt-add-repository --remove https://download.sublimetext.com apt/     ** Caso necessite eliminar um ppa de atualizar no apt update

ip addr

sudo snap remove postman
sudo snap install postman

cat /etc/passwd                                        ** Dados do usuário
hitory -E | less                                       ** fazer a exibição de histórico humanizado no zsh com less
rm -rf /                                               ** É UMA BOMBA PARA SEU PC elimina tudo no diretório raiz 

export TMOUT=10                                        ** Desloga durante um tempo                                   
set | less                                             ** você conseguirá ver as variáveis de ambiente

echo $UID                                              ** Id do usuário no sistema

grep jorgeborges /etc/passwd                           ** O grep captura uma linha localizada por uma busca em arquivo

ls -ln                                                 ** Faz uma listagem por número de id de usuários
0                                                      ** Sempre é o id do root

echo $PS1                                              ** customiza o shell
$PS2                                                   ** \ pula linha 
$PS3
$PS4 


alias ls="ls -l"                                       ** Simplificação renomeando

.bashrc                                                ** É um arquivo de sessão para shell não login, quando não precisa de login
.profile                                               ** É executado para shell que precisa de login

which cp 
/usr/bin/cp 
less /usr/bin/cp                                       ** Além de um caminho

vim sshd_config                                        ** Configuração de segurança do ssh

/usr/local/sbin                                        ** Onde ficam os bin de super usuário

tar                                                    ** É um arquivador

echo $?                                                ** verifica se os programas executaram 0 é sucesso e 1 é falha

echo -e "Bom dia\nfulano"                              ** quebra de linha dentro do echo

echo -e $'$custom-purple: #694ED8 \n$cutom-purple-dark: #6600CC !default;' >> src/styles/_custom_color.scss  ** caso texto haja caracteres especiais como dolar

sudo apt-get install xclip                             ** Fazer buffer de seleção 

pwd | xclip -sel clip                                  ** Agora você pode copiar a saida de um comando e logo depois colar normalmente em outro local.


head -n 1 /etc/passwd                                  => Comando que pega as 10 primeiras linhas de um arquivo
root:x:0:0:root:/root:/usr/bin/zsh                     => Essa seria a saida onde x significa que a senha está criptografado e em outro local /etc/shadowuse
/etc/shadow                                            => Onde encotram-se as senhas
/etc/gshadow
/etc/group
$ pwunconv
$ pwconv                                           
useradd -u <pode_ser_espedificado_o_id_usuario> -g <pode_ser_especificado_o_group> -c <adicionar_comentário> <nome>             => Adicionar um usuário

passwd                                                 => Modifica a senha do usuário corrente
passwd  -e                                             => Expire, expirar senha
passwd -de                                             => Deletando e expirando a senha
passwd -l                                              => Lock a conta, o user, bloqueia
passwd -u                                              => Faz o unlock para desbloquear o user 
chage -l <nome_do_usuário>                             => Mostra várias informações do user $ chage -l jorgeborges
adduser                                                => diferente do useradd, é mais automático
userdel   -r <podemos_remover_os_diretorios_do_user>   => remove o usuário
usermod                                                => Modificar dados de um usuário
groupadd  <nome_do_grupo>
groupdel  <nome_do_grupo>
gpasswd -a <nome_do_usuário_que_deseja_adicionar> <nome_do_grupo>
gpasswd -d <nome_do_usuário_que_deseja_adicionar> <nome_do_grupo_que_deseja_remover_este_usuário>

*Permissões

r => 4
w => 2
x => 1

r => read
w => write
x => execution

a => todos
u => usuário dono
g => grupo
o => outros

chmod => modifica as permissões dos arquivos e diretórios
chown => modifica a permissão dono ou/o grupo do arquivo/diretorio.

-rwxrwxrwx => permissão 777  / um aarquivo texto
lrwxwrwxrwx => um arquivo de link simbolico
drwxwrwxrwx => um diretorFio
crwxwrwxrwx => arquivo de character
brwxwrwxrwx => disp Bloco do hd;

 
-rw-r--r-- => 644         / contado a permissão r => 4 , w => 2 e x => 1

chmod o-x                 / remover permissão de outros
chmod g+x                 / adicionando permissão de execução para os grupos
chmod a=rw                / todos com permissão rw
chmod -R 777              / mudando a permissão de todos as subpastas de um diretório; R é de recursivo  

chown <nome_user> <arquivo>              / ch=change - own = dono;  mudar o dono do arquivo
chown :<nome_grupo> <arquivo>            / mudar o dono grupo do arquivo
chown root:root <arquivo>                / mudar o user dono e o dono do grupo de uma vez.

getfacl    => informações                           
setfacl    => posso modificar arquivos de forma que usuário de grupos diferentes possam ter permisão de modificar o arquivo

top                                                     => Mostra dados da máquina
       
sudo ufw app list                                       => O comando ufw é de acesso e configuração do firewall tem ser habilitado



------------------------------------------Tilix - Terminal Emulator   -------------------------------------------------------------

control + shift + A                                    => Mostrar o painel de atalho ( Criado pelo usuário )




------------------------------------------Tmux - >Vim -------------------------------------------------------------

                        VIM 
                                                                         k
      Move around:  Use the cursor keys, or "h" to go left,            h   l
                    "j" to go down, "k" to go up, "l" to go right.       j
Close this window:  Use ":q<Enter>".
   Get out of Vim:  Use ":qa!<Enter>" (careful, all changes are lost!).

Jump to a subject:  Position the cursor on a tag (e.g. bars) and hit CTRL-].
   With the mouse:  ":set mouse=a" to enable the mouse (in xterm or GUI).
                    Double-click the left mouse button on a tag, e.g. bars.
        Jump back:  Type CTRL-O.  Repeat to go further back.

Get specific help:  It is possible to go directly to whatever you want help
                    on, by giving an argument to the :help command.
                    Prepend something to specify the context:  help-context




                      Normal mode command                  :help x
                      Visual mode command         v_       :help v_u
                      Insert mode command         i_       :help i_<Esc>
                      Command-line command        :        :help :quit
                      Command-line editing        c_       :help c_<Del>
                      Vim command argument        -        :help -r
                      Option                      '        :help 'textwidth'
                      Regular expression          /        :help /[

i                    => Começar a inserir 
I                    => Ele começa a inserir no inicio da linha
a                    => Começa a inserior o caracter seguinte
A                    => Começa no final da linha.
S                    => Apaga linha inteira e começa uma inserção
:w                   => Salva o arquivo
:wq                  => Salva e sair
:q!                  => Sair sem salva
:x                   => Salvar e sair 
shift + ZZ           => Salvar e sair (comando mais rápido) 
yy                   => Copiar uma linha (2 yy) ou (3 yy) multiplas linhas
p                    => Colar
dd                   => recortar linha e para colar é o p.

d                    => deleta.
v                    => modo visual ( Agora você conseguirá selecionar trechos de código com as *setas - não o mouse)
y                    => No modo visual copia
p                    => Cola no modo visual
control+v            => Modo visual vertical

yw                   => copia uma palavra, só lembrar que o cursor ficará na frente da palavra. ( 3yw, 4yw - copia 3 e 4 palavras)
x                    => você conseguirá fazer um backspace ou deletar.
:w <nome>            => É como um salvar como, fique atento vc irá criar um novo arquivo.
:split <arquivo>     => Consigo fazer a divisão do vim com para dois arquivos
control + ww         => pula de uma tab para outra.
:r /etc/hosts        => basicamente ele faz a leitura de um arquivo e joga no seu arquivo.
/<uma palavra> + enter     => Essa é a busca no vim
?<palavra>           => Irá fazer uma busca de baixo para cima.
n                    => Irá pular os valores das buscas. 


:1,10s /<palavra antiga>/<palavra nova>   => Basicamente faz um replace seu arquivo, em um limite de linha, mas para só um elemento
:1,10s /<palavra antiga>/<palavra nova>/g   => Basicamente faz um replace em todo o seu arquivo, em um limite de linha, de todos os elementos.

:%s /<palavra antiga>/<palavra nova>     => Basicamente faz um replace em todo o seu arquivo
:%s/<palavra antiga>/<palavra nova>/g    => com o g no final substituira toda as palavras mesmo com as repetições em uma linha


:e <novo_arquivo_que_vc_quer_abrir>      => Abrindo um novo arquivo

:syntax on           => Liga o reconhecimento de sysntax on 
:syntax o            => Desliga

:set number          => Adiciona a numeração das linhas uma referência
:set nonu            => desabilitar a numeração 

:ab <novoatalho> <umaPalavra_que_voce_deseja_substituir>               => Criando atalho

:set ai              => Auto identação.
:set noai            => Desativando a auto-identação.
:set visualbell      => Não irá mais fazer barulho de alerta. 
:set ic              => torna a busca sem ser case sesnitive 
:set tabstop=2       => Definir tamanho do tab
:set showmatch       => Ele irá destacar as chaves quando abre e fecha

:.,$!sort            => colocar em ordem alfabetica
u                    => desfaz
control+r            => refaz 

:.,$!sort | pr -2t   => ordena e divide em duas colunas ( t é para não trazer o título )

control + s          => Modo superUser para sair digite control+q

Configurando o vim:

homw/.vimrc

colorscheme blue
set tabstop=2
set number
set cursorline
set showcmd
set hlsearch
set autoindent
syntax on
set visaulbell
set showmatch











============================
leviatnan1 - ~/.backup$ grep leviathan bookmarks.html 
leviathan2 - ougahZi8Ta (ltrace) -
